{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","undefined","trim","length","categories","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","gif","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","GifExpertApp","index","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,sBACiBC,IAAfL,GAA4BA,EAAWM,OAAOC,OAAS,GACvDT,GAAc,SAACU,GAAD,OAAiBR,GAAjB,mBAAgCQ,QAQlD,SACI,uBACIC,KAAK,OACLC,MAAOV,EACPW,SAnBmB,SAAAR,GAC3BF,EAAcE,EAAES,OAAOF,a,QCRlBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACrC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCJHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,0FAC4EO,UAAUF,GADtF,gDAGAG,MAAMR,GAHN,cAGbS,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,MAAK,CAAEhB,GAAIgB,EAAIhB,GAAIC,MAAOe,EAAIf,MAAOC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QAN5E,kBAOZY,GAPY,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SACtB,ECFwB,SAACA,GACzB,MAA0BtB,mBAAS,CAAE4B,KAAM,GAAIO,SAAS,IAAxD,mBAAOC,EAAP,KAAcC,EAAd,KAMA,OAJAC,qBAAU,WACNjB,EAAQC,GAAUiB,MAAK,SAAAV,GAAI,OAAIQ,EAAS,CAAET,KAAMC,EAAMM,SAAS,SAChE,CAACb,IAEGc,EDL2BI,CAAalB,GAAjCU,EAAd,EAAQJ,KAAcO,EAAtB,EAAsBA,QACtB,OACI,qCACI,oBAAIjB,UAAU,mCAAd,SAAkDI,IACjDa,GAAW,wCACZ,qBAAKjB,UAAU,YAAf,SAEQc,EAAOF,KAAI,SAAAW,GAAK,OAAI,cAAC,EAAD,eAAgCA,GAAdA,EAAM1B,aEkBjD2B,EA1BM,WAEjB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAOS,EAAP,KAAmBV,EAAnB,KAOA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQU,EAAWqB,KACP,SAACR,EAAUqB,GAAX,OAAqB,cAAC,EAAD,CAASrB,SAAUA,GAAeA,Y,MChB/EsB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6677a8ba.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState(\"\");\n\n    const handleInputValueChange = e => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue !== undefined && inputValue.trim().length > 2)\n            setCategories((categories) => [inputValue, ...categories]);\n\n\n\n\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputValueChange}\n            />\n        </form>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const GifGridItem = ({ id, title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    );\n};","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=3iPHkj7Mz4dkCi5V84ISODumznI1X73G&q=${encodeURI(category)}&limit=25&offset=0&rating=g&lang=en`;\n\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(gif => ({ id: gif.id, title: gif.title, url: gif.images.downsized_medium.url }))\n    return gifs;\n};","import { GifGridItem } from \"./GifGridItem\";\n\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({ category }) => {\n    const { data: images, loading } = useFetchGifs(category);\n    return (\n        <>\n            <h3 className=\"animate__animated animate__flash\">{category}</h3>\n            {loading && <p>Loading</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map(image => <GifGridItem key={image.id} {...image} />)\n                }\n            </div>\n        </>\n    );\n}","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({ data: [], loading: true });\n\n    useEffect(() => {\n        getGifs(category).then(gifs => setState({ data: gifs, loading: false }));\n    }, [category]);\n\n    return state\n}","import { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n    // const categories = [\"One Punch\", \"Samurai X\", \"Dragon Ball\"]\n    const [categories, setCategories] = useState([\"One Punch\"])\n\n    // const handleAdd = () => {\n    //     setCategories([...categories, \"Test\"])\n    // };\n\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            <ol>\n                {\n                    categories.map(\n                        (category, index) => <GifGrid category={category} key={category} />\n                    )\n                }\n            </ol>\n        </>\n    );\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}